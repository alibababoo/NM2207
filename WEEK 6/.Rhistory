setwd("~/Downloads/NM2207/WEEK 6")
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
for (x in c(3, 6, 9)) {
print(x)
}
# Left-hand side code: for loop for passing values
for (x in 1:8) {print(x)}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])}
# Enter code here
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
data_list <- vector("list", length = 5)
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
data_list <- vector("list", length = 5)
for (i in 1:length(sample_sizes)) {
}
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
data_list <- vector("list", length = 5)
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
data_list <- vector("list", length = 5)
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
sample_means
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(2, length(sample_sizes))
sample_means
# Initialisation of data_list
vec <- c("x", "y", "z")
1:length(vec)
seq_along(vec)
# Initialisation of data_list
vec <- c("x", "y", "z")
1:length(vec)
# Example: bad idea!
a <- 7:11
b <- 8:12
out <- rep(0L, 5)
for (i in seq_along(a)) {
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
a <- 7:11
b <- 8:12
out <- a + b
out
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
fmean <- function(sample_sizes){
sample_means <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
}
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
fmean <- function(sample_sizes){
sample_means <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
}
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
fmean <- function(sample_sizes){
sample_means <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
}
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
# Compute sd
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Left-hand side code: for loop
for(i in 1:5){
print(i)
}
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1
}
1+"1"
?x|y
x<-c(6L),
x<-c(6L)
typeof(x)
func = function(){
age = 18
print(age)
}
knitr::opts_chunk$set(echo = TRUE)
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1
}
func = function(){
+     age = 18
+     print(age)
+ }
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1
}
func = function(){
+     age = 18
+     print(age)}
# Right-hand side code: while loop
func = function(){
+     age = 18
+     print(age)}
?local
# Right-hand side code: while loop
customer_orders %>%
filter(price > 100) %>%
select(OrderID, CustomerID, ProductID, Quantity, Price)
?summary.glm
?summarise
?count
?count()
?sum()
setwd("~/Downloads/NM2207/WEEK 6")
library(readr)
gapminder <- read_csv("~/Downloads/NM2207/quiz/gapminder.csv")
View(gapminder)
gapminder <- read_csv("gapminder.csv")
select(gapminder.csv, country, continent, year)
select(gapminder.csv, country,continent,year)
library(tidyverse)
select(gapminder.csv, country,continent,year)
select(gapminder, country,continent,year)
country <- c([1:1704])
sum(duplicated(df$country))
count(duplicated(df$country))
gapminder %>%
group_by(country) %>%
summarise(count = n())
gapminder %>% filter(country== 'Singapore')%>%
mean(gapminder$lifeExp)
gapminder %>%
filter(country== 'Singapore')%>%
select(country,lifeExp)%>%
mean(gapminder$lifeExp)
gapminder %>%
filter(country== 'Singapore')%>%
select(country,lifeExp)
mean(gapminder$lifeExp)
ggplot(Country== 'Singapore', aes(x=Year,y=Pop))
ggplot(country== 'Singapore', aes(x=Year,y=Pop))
ggplot(gapminder, aes(x=Year,y=Pop))
ggplot(gapminder, aes(x=year,y=pop))
ggplot(gapminder, aes(x=year,[1952:2007]  ,y=pop))
# Initialise x
x<-10
# Assign the value of x to y
y<-x
# Change the value of x
x<-5
cat("x is", x, "y is", y)
multiply <- function(value){
function_inside_function<-function(multiplier){
return(multiplier*value)
}
return(function_inside_function(10))
}
function_inside_function(50)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("images/countdown.png")
# Enter code here
def rocket_countdown():
# Enter code here
rocket_countdown():
countdown = 10
# Enter code here
rocket_countdown <- function() {
countdown <- 10
while (countdown >= 1) {
cat(countdown, "...")
Sys.sleep(1)
countdown <- countdown - 1
}
cat("Blastoff!\n")
}
rocket_countdown()
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("Enter a word: ")
length_word <- nchar(word)
i <- length_word
cat("Reversed word: ")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word()
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("Enter a word: ")
length_word <- nchar(word)
i <- length_word
cat("Reversed word: ")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word(elephant)
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("elephant")
length_word <- nchar(word)
i <- length_word
cat("Reversed word: ")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word(
)
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("elephant")
length_word <- nchar(word)
i <- length_word
cat("Reversed word: ")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word()
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("elephant")
length_word <- nchar(word)
i <- length_word
cat("Reversed word: elephant")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word()
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("elephant")
length_word <- nchar(word)
i <- length_word
cat("Reversed word:")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word()
# Enter code here
# Function to reverse a word
reverse_word <- function() {
word <- readline("Enter a word: ")
length_word <- nchar(word)
i <- length_word
cat("Reversed word:")
while (i > 0) {
cat(substr(word, i, i))
i <- i - 1
}
cat("\n")
}
reverse_word()
elephant
# Enter code here
reverse_word <- function() {
word <- readline("Enter a word: ")
length_word <- nchar(word)
reversed_word <- ""
while (length_word > 0) {
reversed_word <- paste(reversed_word, substr(word, length_word, length_word), sep = "")
length_word <- length_word - 1
}
cat("Reversed word:", reversed_word, "\n")
}
reverse_word()
